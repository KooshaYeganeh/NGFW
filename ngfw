#!/bin/bash

# Define variables for tools' installation paths and other settings
SURICATA_CONF="/etc/suricata/suricata.yaml"
ZEOK_CONF="/opt/zeek/etc/zeekctl.cfg"
MALTRAIL_CONF="/etc/maltrail/maltrail.conf"
MALDETECT_CONF="/usr/local/maldetect/conf.maldet"
wondershaper="/usr/sbin/wondershaper"

# Functions to install packages
install_packages() {
    echo "Updating system and installing necessary packages..."
    zypper ref && zypper up -y
    zypper -n install iptables suricata zeek clamav maldet maltrail python3-pip
}

# Function to configure iptables firewall
configure_firewall() {
    echo "Configuring iptables firewall..."
    # Flush existing rules and set default policies to drop
    iptables -F
    iptables -P INPUT DROP
    iptables -P FORWARD DROP
    iptables -P OUTPUT ACCEPT

    # Allow traffic from localhost
    iptables -A INPUT -i lo -j ACCEPT
    iptables -A OUTPUT -o lo -j ACCEPT

    # Allow incoming SSH (port 22)
    iptables -A INPUT -p tcp --dport 22 -j ACCEPT

    # Allow incoming HTTP (port 80) and HTTPS (port 443)
    iptables -A INPUT -p tcp --dport 80 -j ACCEPT
    iptables -A INPUT -p tcp --dport 443 -j ACCEPT

    # Allow ICMP (ping)
    iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT

    # Save iptables rules
    iptables-save > /etc/iptables/rules.v4
}

# Function to create a firewall rule
create_firewall_rule() {
    echo "Creating firewall rule..."
    if [ -n "$2" ] && [ -n "$3" ]; then
        iptables -A INPUT -p tcp --dport "$2" -s "$3" -j ACCEPT
        echo "Rule added: Allowing TCP traffic on port $2 from $3"
    else
        echo "Usage: --create-rule <port> <source_ip>"
    fi
}

# Function to create a zone in iptables
create_zone() {
    echo "Creating iptables zone..."
    if [ -n "$2" ]; then
        iptables -N "$2"
        iptables -A "$2" -j ACCEPT
        echo "Zone '$2' created and accepting traffic."
    else
        echo "Usage: --create-zone <zone_name>"
    fi
}

# Function to start Suricata (IDS/IPS)
start_suricata() {
    echo "Starting Suricata for network traffic analysis..."
    systemctl enable suricata
    systemctl start suricata
    # Ensure Suricata is running
    systemctl status suricata
}

# Function to start Zeek (formerly Bro) (Network Analysis)
start_zeek() {
    echo "Starting Zeek for network traffic sniffing..."
    zeekctl deploy
    # Ensure Zeek is running
    zeekctl status
}

# Function to scan files with ClamAV
scan_files_clamav() {
    echo "Scanning files with ClamAV..."
    freshclam  # Update ClamAV database
    clamscan -r /home /var/www /etc --exclude-dir=/proc --exclude-dir=/sys --exclude-dir=/dev
}

# Function to scan for malware with Maldet
scan_files_maldet() {
    echo "Scanning files with Maldet (Linux Malware Detect)..."
    maldet --update
    maldet --scan-all /home /var/www
}

# Function to start Maltrail (IP Monitoring)
start_maltrail() {
    echo "Starting Maltrail for IP Monitoring..."
    systemctl enable maltrail
    systemctl start maltrail
    # Ensure Maltrail is running
    systemctl status maltrail
}

# Function to manage bandwidth using wondershaper
manage_bandwidth() {
    echo "Managing bandwidth using wondershaper..."
    if [ -n "$2" ] && [ -n "$3" ]; then
        $wondershaper "$2" "$3"  # Interface and bandwidth limit (in Kbps)
        echo "Bandwidth limit set: $3 Kbps on interface $2"
    else
        echo "Usage: --bandwidth <interface> <limit_in_kbps>"
    fi
}

# Main script execution based on user input

if [ "$1" == "--firewall" ]; then
    if [ "$2" == "--create-rule" ]; then
        create_firewall_rule "$@"
    elif [ "$2" == "--create-zone" ]; then
        create_zone "$@"
    else
        echo "Firewall command not found. Usage: --firewall --create-rule <port> <source_ip> or --create-zone <zone_name>"
    fi
elif [ "$1" == "--scan-av" ]; then
    if [ "$2" == "--file" ]; then
        scan_files_clamav
    elif [ "$2" == "--dir" ]; then
        scan_files_clamav
    else
        echo "AV scan command not found. Usage: --scan-av --file or --scan-av --dir"
    fi
elif [ "$1" == "--bandwidth" ]; then
    manage_bandwidth "$@"
elif [ "$1" == "--sniff" ]; then
    echo "Starting network sniffing..."
    start_suricata
    start_zeek
elif [ "$1" == "--install" ]; then
    install_packages
else
    echo "Invalid command. Available commands:"
    echo "--firewall --create-rule <port> <source_ip>"
    echo "--firewall --create-zone <zone_name>"
    echo "--scan-av --file or --dir"
    echo "--bandwidth <interface> <limit_in_kbps>"
    echo "--sniff"
    echo "--install"
fi


